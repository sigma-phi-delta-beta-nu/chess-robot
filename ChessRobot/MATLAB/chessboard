function [fen] = chessboard()
% 
% camList = webcamlist
% cam = webcam(1)
% preview(cam)
% img = snapshot(cam)


coordinates_tracker = ['test'];
board = ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x';
         'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'];
% Define color ranges for each color
white_range = [.19298, .088372, .84314];
black_range = [.56667, .089286, .21961];
light_green_range = [.30222, .46914, .63529];
dark_green_range = [.41765, .63433, .52549];
dark_blue_range = [ .58137, .80569, .82745];
purple_range = [.72564, .46763, .5451];
orange_range = [ .034676, .74129, .78824]; 
red_range = [.02, .69306, .71765]; 
light_blue_range = [ .52801, .66854, .69804];
light_pink_range = [.94033, .40299, .78824];
dark_pink_range = [.9469, .55392, .8];
yellow_range = [.14119, .69469, .88627];

% Load the image
img = imread('Stickers1.png');
img_hsv = rgb2hsv(img);
imshow(img)
hold on; 

% Define the color ranges
color_names = {'W Horse', 'B Horse', 'B Bishop', 'W Rook', 'B Rook', 'B King', 'W Queen', 'W Bishop', 'W King', 'B Queen', 'W Pawn', 'B Pawn'};
color_ranges = {light_green_range, dark_green_range, ...
    dark_blue_range, purple_range, orange_range, red_range, light_blue_range, ...
    light_pink_range, dark_pink_range, yellow_range, white_range, black_range };
tolarence = .08; 
% Loop through each color range
for i = 1:length(color_ranges)
    % Define the color range for the current color
    color_range = color_ranges{i};
   
    
    % Create a binary mask for the current color
    color_mask = (img_hsv(:,:,1) >= color_range(1)*(1-tolarence)) & (img_hsv(:,:,1) <= color_range(1)*(1+tolarence)) & ...
        (img_hsv(:,:,2) >= color_range(2)*(1-tolarence)) & (img_hsv(:,:,2) <= color_range(2)*(1+tolarence)) & ...
        (img_hsv(:,:,3) >= color_range(3)*(1-tolarence)) & (img_hsv(:,:,3) <= color_range(3)*(1+tolarence));
    
    % Use the binary mask to create a bounding box around the current color
    props = regionprops(color_mask, 'BoundingBox');
    for j = 1:length(props)
        box = props(j).BoundingBox;
        cord = GetCoordinate(box(1), box(2));
        [value, usless] = ismember(cord, coordinates_tracker);
        if (value == 1)
            continue 
        else 
            coordinates_tracker = [coordinates_tracker; cord];
            text(box(1)+box(3)/2, box(2)+box(4)/2, color_names{i} + " " + cord, 'HorizontalAlignment', 'center', 'VerticalAlignment', 'middle', 'Color', 'r', 'FontWeight', 'bold');
            board = updateBoard( color_names{i}, cord, board);
        end
    end
end
fen = positionToFEN(board); 
end
